apiVersion: v1
kind: Service
metadata:
  name: front
  namespace: app-namespace
spec:
  type: ClusterIP
  selector:
    app: front-app
  ports:
    - name: http
      port: 3000
      protocol: TCP
      
---

apiVersion: v1
kind: Deployment
metadata:
  name: front-application
  namespace: app-namespace
spec:
  selector:
    matchLabels:
      app: front-app
  templates:
    metadata:
      labels:
        app: front-app
    spec:
      volumes:
        - name: nginx-configuration-mapping 
          configMap:
            - name: nginx-config-map 
              items:
                - key: nginx.conf
        
      terminationGracePeriodSeconds: 60
      initContainers:
        - name: nginx-configuration 
          image: nginx  
          ports:
            - containerPort: 8010 
              protocol: TCP 
          imagePullPolicy: IfNotPresent 
          volumeMounts:
            - name: nginx-configuration-mapping 
              path: nginx.conf
              subPath: nginx.conf
              readOnly: true

      containers:
        - name: front-app-container
          image: crazycoderrr/infrastructure_front_app
          ports:
            - containerPort: 3000
              protocol: TCP
          envFrom:
            - configMapRef:
                - name: front-app-config-map
          imagePullPolicy: Always

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: front-app-config-map
  namespace: app-namespace
data:
  BACKEND_APPLICATION_HOST: infrastructure.app-namespace.svc.cluster.local:8000
  BACKEND_APPLICATION_PORT: 8000

--- 

apiVersion: v1
kind: ConfigMap 
metadata:
  name: nginx-configuration-map 
  namespace: app-namespace 
data:
  nginx.conf: | 
      events {
          worker_connections 1024;
      }

      http {

          # Upstreams Configuration for the Frontend Nginx Server
          upstream front_application_upstream {
              server front_application:3000;
          }
          # Server Configuration for the Nginx Server 
          server {

              listen 4000;
              # Base Location for the Not Found Page 
              location @not_found {
                  # Redirects to the Not Found Page
                  rewrite ^/not/found(.*)$ https://${applicationHost}:${applicationPort}/$1 redirect;
              }
              # Base Location for All Routes
              location / {
                  proxy_pass http://front_application_upstream;
                  proxy_set_header Host    $http_host;
                  proxy_set_header Upgrade $http_upgrade;
                  add_header Access-Control-Allow-Origin "*";
                  add_header Access-Control-Allow-Credentials: "true";
                  add_header Access-Control-Allow-Methods "GET,POST,PUT,OPTIONS,DELETE";
                  error_page 404 @not_found;
              }
          }
      }

